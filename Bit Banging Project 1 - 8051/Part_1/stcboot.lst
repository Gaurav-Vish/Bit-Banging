                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.0 #15242 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module stcboot
                                      6 	
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _period
                                     12 	.globl _main
                                     13 	.globl _CY
                                     14 	.globl _AC
                                     15 	.globl _F0
                                     16 	.globl _RS1
                                     17 	.globl _RS0
                                     18 	.globl _OV
                                     19 	.globl _F1
                                     20 	.globl _P
                                     21 	.globl _PS
                                     22 	.globl _PT1
                                     23 	.globl _PX1
                                     24 	.globl _PT0
                                     25 	.globl _PX0
                                     26 	.globl _RD
                                     27 	.globl _WR
                                     28 	.globl _T1
                                     29 	.globl _T0
                                     30 	.globl _INT1
                                     31 	.globl _INT0
                                     32 	.globl _TXD
                                     33 	.globl _RXD
                                     34 	.globl _P3_7
                                     35 	.globl _P3_6
                                     36 	.globl _P3_5
                                     37 	.globl _P3_4
                                     38 	.globl _P3_3
                                     39 	.globl _P3_2
                                     40 	.globl _P3_1
                                     41 	.globl _P3_0
                                     42 	.globl _EA
                                     43 	.globl _ES
                                     44 	.globl _ET1
                                     45 	.globl _EX1
                                     46 	.globl _ET0
                                     47 	.globl _EX0
                                     48 	.globl _P2_7
                                     49 	.globl _P2_6
                                     50 	.globl _P2_5
                                     51 	.globl _P2_4
                                     52 	.globl _P2_3
                                     53 	.globl _P2_2
                                     54 	.globl _P2_1
                                     55 	.globl _P2_0
                                     56 	.globl _SM0
                                     57 	.globl _SM1
                                     58 	.globl _SM2
                                     59 	.globl _REN
                                     60 	.globl _TB8
                                     61 	.globl _RB8
                                     62 	.globl _TI
                                     63 	.globl _RI
                                     64 	.globl _P1_7
                                     65 	.globl _P1_6
                                     66 	.globl _P1_5
                                     67 	.globl _P1_4
                                     68 	.globl _P1_3
                                     69 	.globl _P1_2
                                     70 	.globl _P1_1
                                     71 	.globl _P1_0
                                     72 	.globl _TF1
                                     73 	.globl _TR1
                                     74 	.globl _TF0
                                     75 	.globl _TR0
                                     76 	.globl _IE1
                                     77 	.globl _IT1
                                     78 	.globl _IE0
                                     79 	.globl _IT0
                                     80 	.globl _P0_7
                                     81 	.globl _P0_6
                                     82 	.globl _P0_5
                                     83 	.globl _P0_4
                                     84 	.globl _P0_3
                                     85 	.globl _P0_2
                                     86 	.globl _P0_1
                                     87 	.globl _P0_0
                                     88 	.globl _B
                                     89 	.globl _ACC
                                     90 	.globl _PSW
                                     91 	.globl _IP
                                     92 	.globl _P3
                                     93 	.globl _IE
                                     94 	.globl _P2
                                     95 	.globl _SBUF
                                     96 	.globl _SCON
                                     97 	.globl _P1
                                     98 	.globl _TH1
                                     99 	.globl _TH0
                                    100 	.globl _TL1
                                    101 	.globl _TL0
                                    102 	.globl _TMOD
                                    103 	.globl _TCON
                                    104 	.globl _PCON
                                    105 	.globl _DPH
                                    106 	.globl _DPL
                                    107 	.globl _SP
                                    108 	.globl _P0
                                    109 	.globl _seg_table
                                    110 	.globl _currentmillis
                                    111 	.globl _startmillis
                                    112 	.globl _switchCount
                                    113 	.globl _number
                                    114 	.globl _delay
                                    115 	.globl _binary_count
                                    116 	.globl _cylon
                                    117 	.globl _dual_cylon
                                    118 	.globl _display_number
                                    119 	.globl _number_clicker
                                    120 ;--------------------------------------------------------
                                    121 ; special function registers
                                    122 ;--------------------------------------------------------
                                    123 	.area RSEG    (ABS,DATA)
      000000                        124 	.org 0x0000
                           000080   125 _P0	=	0x0080
                           000081   126 _SP	=	0x0081
                           000082   127 _DPL	=	0x0082
                           000083   128 _DPH	=	0x0083
                           000087   129 _PCON	=	0x0087
                           000088   130 _TCON	=	0x0088
                           000089   131 _TMOD	=	0x0089
                           00008A   132 _TL0	=	0x008a
                           00008B   133 _TL1	=	0x008b
                           00008C   134 _TH0	=	0x008c
                           00008D   135 _TH1	=	0x008d
                           000090   136 _P1	=	0x0090
                           000098   137 _SCON	=	0x0098
                           000099   138 _SBUF	=	0x0099
                           0000A0   139 _P2	=	0x00a0
                           0000A8   140 _IE	=	0x00a8
                           0000B0   141 _P3	=	0x00b0
                           0000B8   142 _IP	=	0x00b8
                           0000D0   143 _PSW	=	0x00d0
                           0000E0   144 _ACC	=	0x00e0
                           0000F0   145 _B	=	0x00f0
                                    146 ;--------------------------------------------------------
                                    147 ; special function bits
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0_0	=	0x0080
                           000081   152 _P0_1	=	0x0081
                           000082   153 _P0_2	=	0x0082
                           000083   154 _P0_3	=	0x0083
                           000084   155 _P0_4	=	0x0084
                           000085   156 _P0_5	=	0x0085
                           000086   157 _P0_6	=	0x0086
                           000087   158 _P0_7	=	0x0087
                           000088   159 _IT0	=	0x0088
                           000089   160 _IE0	=	0x0089
                           00008A   161 _IT1	=	0x008a
                           00008B   162 _IE1	=	0x008b
                           00008C   163 _TR0	=	0x008c
                           00008D   164 _TF0	=	0x008d
                           00008E   165 _TR1	=	0x008e
                           00008F   166 _TF1	=	0x008f
                           000090   167 _P1_0	=	0x0090
                           000091   168 _P1_1	=	0x0091
                           000092   169 _P1_2	=	0x0092
                           000093   170 _P1_3	=	0x0093
                           000094   171 _P1_4	=	0x0094
                           000095   172 _P1_5	=	0x0095
                           000096   173 _P1_6	=	0x0096
                           000097   174 _P1_7	=	0x0097
                           000098   175 _RI	=	0x0098
                           000099   176 _TI	=	0x0099
                           00009A   177 _RB8	=	0x009a
                           00009B   178 _TB8	=	0x009b
                           00009C   179 _REN	=	0x009c
                           00009D   180 _SM2	=	0x009d
                           00009E   181 _SM1	=	0x009e
                           00009F   182 _SM0	=	0x009f
                           0000A0   183 _P2_0	=	0x00a0
                           0000A1   184 _P2_1	=	0x00a1
                           0000A2   185 _P2_2	=	0x00a2
                           0000A3   186 _P2_3	=	0x00a3
                           0000A4   187 _P2_4	=	0x00a4
                           0000A5   188 _P2_5	=	0x00a5
                           0000A6   189 _P2_6	=	0x00a6
                           0000A7   190 _P2_7	=	0x00a7
                           0000A8   191 _EX0	=	0x00a8
                           0000A9   192 _ET0	=	0x00a9
                           0000AA   193 _EX1	=	0x00aa
                           0000AB   194 _ET1	=	0x00ab
                           0000AC   195 _ES	=	0x00ac
                           0000AF   196 _EA	=	0x00af
                           0000B0   197 _P3_0	=	0x00b0
                           0000B1   198 _P3_1	=	0x00b1
                           0000B2   199 _P3_2	=	0x00b2
                           0000B3   200 _P3_3	=	0x00b3
                           0000B4   201 _P3_4	=	0x00b4
                           0000B5   202 _P3_5	=	0x00b5
                           0000B6   203 _P3_6	=	0x00b6
                           0000B7   204 _P3_7	=	0x00b7
                           0000B0   205 _RXD	=	0x00b0
                           0000B1   206 _TXD	=	0x00b1
                           0000B2   207 _INT0	=	0x00b2
                           0000B3   208 _INT1	=	0x00b3
                           0000B4   209 _T0	=	0x00b4
                           0000B5   210 _T1	=	0x00b5
                           0000B6   211 _WR	=	0x00b6
                           0000B7   212 _RD	=	0x00b7
                           0000B8   213 _PX0	=	0x00b8
                           0000B9   214 _PT0	=	0x00b9
                           0000BA   215 _PX1	=	0x00ba
                           0000BB   216 _PT1	=	0x00bb
                           0000BC   217 _PS	=	0x00bc
                           0000D0   218 _P	=	0x00d0
                           0000D1   219 _F1	=	0x00d1
                           0000D2   220 _OV	=	0x00d2
                           0000D3   221 _RS0	=	0x00d3
                           0000D4   222 _RS1	=	0x00d4
                           0000D5   223 _F0	=	0x00d5
                           0000D6   224 _AC	=	0x00d6
                           0000D7   225 _CY	=	0x00d7
                                    226 ;--------------------------------------------------------
                                    227 ; overlayable register banks
                                    228 ;--------------------------------------------------------
                                    229 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        230 	.ds 8
                                    231 ;--------------------------------------------------------
                                    232 ; internal ram data
                                    233 ;--------------------------------------------------------
                                    234 	.area DSEG    (DATA)
      000000                        235 _number::
      000000                        236 	.ds 2
      000002                        237 _switchCount::
      000002                        238 	.ds 2
      000004                        239 _startmillis::
      000004                        240 	.ds 4
      000008                        241 _currentmillis::
      000008                        242 	.ds 4
      00000C                        243 _seg_table::
      00000C                        244 	.ds 10
                                    245 ;--------------------------------------------------------
                                    246 ; overlayable items in internal ram
                                    247 ;--------------------------------------------------------
                                    248 	.area	OSEG    (OVR,DATA)
                                    249 ;--------------------------------------------------------
                                    250 ; Stack segment in internal ram
                                    251 ;--------------------------------------------------------
                                    252 	.area SSEG
      000000                        253 __start__stack:
      000000                        254 	.ds	1
                                    255 
                                    256 ;--------------------------------------------------------
                                    257 ; indirectly addressable internal ram data
                                    258 ;--------------------------------------------------------
                                    259 	.area ISEG    (DATA)
                                    260 ;--------------------------------------------------------
                                    261 ; absolute internal ram data
                                    262 ;--------------------------------------------------------
                                    263 	.area IABS    (ABS,DATA)
                                    264 	.area IABS    (ABS,DATA)
                                    265 ;--------------------------------------------------------
                                    266 ; bit data
                                    267 ;--------------------------------------------------------
                                    268 	.area BSEG    (BIT)
                                    269 ;--------------------------------------------------------
                                    270 ; paged external ram data
                                    271 ;--------------------------------------------------------
                                    272 	.area PSEG    (PAG,XDATA)
                                    273 ;--------------------------------------------------------
                                    274 ; uninitialized external ram data
                                    275 ;--------------------------------------------------------
                                    276 	.area XSEG    (XDATA)
                                    277 ;--------------------------------------------------------
                                    278 ; absolute external ram data
                                    279 ;--------------------------------------------------------
                                    280 	.area XABS    (ABS,XDATA)
                                    281 ;--------------------------------------------------------
                                    282 ; initialized external ram data
                                    283 ;--------------------------------------------------------
                                    284 	.area XISEG   (XDATA)
                                    285 	.area HOME    (CODE)
                                    286 	.area GSINIT0 (CODE)
                                    287 	.area GSINIT1 (CODE)
                                    288 	.area GSINIT2 (CODE)
                                    289 	.area GSINIT3 (CODE)
                                    290 	.area GSINIT4 (CODE)
                                    291 	.area GSINIT5 (CODE)
                                    292 	.area GSINIT  (CODE)
                                    293 	.area GSFINAL (CODE)
                                    294 	.area CSEG    (CODE)
                                    295 ;--------------------------------------------------------
                                    296 ; interrupt vector
                                    297 ;--------------------------------------------------------
                                    298 	.area HOME    (CODE)
      000000                        299 __interrupt_vect:
      000000 02r00r00         [24]  300 	ljmp	__sdcc_gsinit_startup
                                    301 ; restartable atomic support routines
      000003                        302 	.ds	5
      000008                        303 sdcc_atomic_exchange_rollback_start::
      000008 00               [12]  304 	nop
      000009 00               [12]  305 	nop
      00000A                        306 sdcc_atomic_exchange_pdata_impl:
      00000A E2               [24]  307 	movx	a, @r0
      00000B FB               [12]  308 	mov	r3, a
      00000C EA               [12]  309 	mov	a, r2
      00000D F2               [24]  310 	movx	@r0, a
      00000E 80 2C            [24]  311 	sjmp	sdcc_atomic_exchange_exit
      000010 00               [12]  312 	nop
      000011 00               [12]  313 	nop
      000012                        314 sdcc_atomic_exchange_xdata_impl:
      000012 E0               [24]  315 	movx	a, @dptr
      000013 FB               [12]  316 	mov	r3, a
      000014 EA               [12]  317 	mov	a, r2
      000015 F0               [24]  318 	movx	@dptr, a
      000016 80 24            [24]  319 	sjmp	sdcc_atomic_exchange_exit
      000018                        320 sdcc_atomic_compare_exchange_idata_impl:
      000018 E6               [12]  321 	mov	a, @r0
      000019 B5 02 02         [24]  322 	cjne	a, ar2, .+#5
      00001C EB               [12]  323 	mov	a, r3
      00001D F6               [12]  324 	mov	@r0, a
      00001E 22               [24]  325 	ret
      00001F 00               [12]  326 	nop
      000020                        327 sdcc_atomic_compare_exchange_pdata_impl:
      000020 E2               [24]  328 	movx	a, @r0
      000021 B5 02 02         [24]  329 	cjne	a, ar2, .+#5
      000024 EB               [12]  330 	mov	a, r3
      000025 F2               [24]  331 	movx	@r0, a
      000026 22               [24]  332 	ret
      000027 00               [12]  333 	nop
      000028                        334 sdcc_atomic_compare_exchange_xdata_impl:
      000028 E0               [24]  335 	movx	a, @dptr
      000029 B5 02 02         [24]  336 	cjne	a, ar2, .+#5
      00002C EB               [12]  337 	mov	a, r3
      00002D F0               [24]  338 	movx	@dptr, a
      00002E 22               [24]  339 	ret
      00002F                        340 sdcc_atomic_exchange_rollback_end::
                                    341 
      00002F                        342 sdcc_atomic_exchange_gptr_impl::
      00002F 30 F6 E0         [24]  343 	jnb	b.6, sdcc_atomic_exchange_xdata_impl
      000032 A8 82            [24]  344 	mov	r0, dpl
      000034 20 F5 D3         [24]  345 	jb	b.5, sdcc_atomic_exchange_pdata_impl
      000037                        346 sdcc_atomic_exchange_idata_impl:
      000037 EA               [12]  347 	mov	a, r2
      000038 C6               [12]  348 	xch	a, @r0
      000039 F5 82            [12]  349 	mov	dpl, a
      00003B 22               [24]  350 	ret
      00003C                        351 sdcc_atomic_exchange_exit:
      00003C 8B 82            [24]  352 	mov	dpl, r3
      00003E 22               [24]  353 	ret
      00003F                        354 sdcc_atomic_compare_exchange_gptr_impl::
      00003F 30 F6 E6         [24]  355 	jnb	b.6, sdcc_atomic_compare_exchange_xdata_impl
      000042 A8 82            [24]  356 	mov	r0, dpl
      000044 20 F5 D9         [24]  357 	jb	b.5, sdcc_atomic_compare_exchange_pdata_impl
      000047 80 CF            [24]  358 	sjmp	sdcc_atomic_compare_exchange_idata_impl
                                    359 ;--------------------------------------------------------
                                    360 ; global & static initialisations
                                    361 ;--------------------------------------------------------
                                    362 	.area HOME    (CODE)
                                    363 	.area GSINIT  (CODE)
                                    364 	.area GSFINAL (CODE)
                                    365 	.area GSINIT  (CODE)
                                    366 	.globl __sdcc_gsinit_startup
                                    367 	.globl __sdcc_program_startup
                                    368 	.globl __start__stack
                                    369 	.globl __mcs51_genXINIT
                                    370 	.globl __mcs51_genXRAMCLEAR
                                    371 	.globl __mcs51_genRAMCLEAR
                                    372 ;	.\stcboot.c:12: unsigned int number = 0;
      000000 E4               [12]  373 	clr	a
      000001 F5*00            [12]  374 	mov	_number,a
      000003 F5*01            [12]  375 	mov	(_number + 1),a
                                    376 ;	.\stcboot.c:13: unsigned int switchCount = 0;
      000005 F5*02            [12]  377 	mov	_switchCount,a
      000007 F5*03            [12]  378 	mov	(_switchCount + 1),a
                                    379 ;	.\stcboot.c:19: unsigned char seg_table[] = {
      000009 75*0C C0         [24]  380 	mov	_seg_table,#0xc0
      00000C 75*0D F9         [24]  381 	mov	(_seg_table + 0x0001),#0xf9
      00000F 75*0E A4         [24]  382 	mov	(_seg_table + 0x0002),#0xa4
      000012 75*0F B0         [24]  383 	mov	(_seg_table + 0x0003),#0xb0
      000015 75*10 99         [24]  384 	mov	(_seg_table + 0x0004),#0x99
      000018 75*11 92         [24]  385 	mov	(_seg_table + 0x0005),#0x92
      00001B 75*12 82         [24]  386 	mov	(_seg_table + 0x0006),#0x82
      00001E 75*13 F8         [24]  387 	mov	(_seg_table + 0x0007),#0xf8
      000021 75*14 80         [24]  388 	mov	(_seg_table + 0x0008),#0x80
      000024 75*15 90         [24]  389 	mov	(_seg_table + 0x0009),#0x90
                                    390 	.area GSFINAL (CODE)
      000000 02r00r49         [24]  391 	ljmp	__sdcc_program_startup
                                    392 ;--------------------------------------------------------
                                    393 ; Home
                                    394 ;--------------------------------------------------------
                                    395 	.area HOME    (CODE)
                                    396 	.area HOME    (CODE)
      000049                        397 __sdcc_program_startup:
      000049 02r01rA3         [24]  398 	ljmp	_main
                                    399 ;	return from main will return to caller
                                    400 ;--------------------------------------------------------
                                    401 ; code
                                    402 ;--------------------------------------------------------
                                    403 	.area CSEG    (CODE)
                                    404 ;------------------------------------------------------------
                                    405 ;Allocation info for local variables in function 'delay'
                                    406 ;------------------------------------------------------------
                                    407 ;time          Allocated to registers 
                                    408 ;------------------------------------------------------------
                                    409 ;	.\stcboot.c:24: void delay(unsigned int time) {
                                    410 ;	-----------------------------------------
                                    411 ;	 function delay
                                    412 ;	-----------------------------------------
      000000                        413 _delay:
                           000007   414 	ar7 = 0x07
                           000006   415 	ar6 = 0x06
                           000005   416 	ar5 = 0x05
                           000004   417 	ar4 = 0x04
                           000003   418 	ar3 = 0x03
                           000002   419 	ar2 = 0x02
                           000001   420 	ar1 = 0x01
                           000000   421 	ar0 = 0x00
      000000 AE 82            [24]  422 	mov	r6, dpl
      000002 AF 83            [24]  423 	mov	r7, dph
                                    424 ;	.\stcboot.c:25: while (time--);
      000004                        425 00101$:
      000004 8E 04            [24]  426 	mov	ar4,r6
      000006 8F 05            [24]  427 	mov	ar5,r7
      000008 1E               [12]  428 	dec	r6
      000009 BE FF 01         [24]  429 	cjne	r6,#0xff,00113$
      00000C 1F               [12]  430 	dec	r7
      00000D                        431 00113$:
      00000D EC               [12]  432 	mov	a,r4
      00000E 4D               [12]  433 	orl	a,r5
      00000F 70 F3            [24]  434 	jnz	00101$
                                    435 ;	.\stcboot.c:26: }
      000011 22               [24]  436 	ret
                                    437 ;------------------------------------------------------------
                                    438 ;Allocation info for local variables in function 'binary_count'
                                    439 ;------------------------------------------------------------
                                    440 ;count         Allocated to registers r6 r7 
                                    441 ;------------------------------------------------------------
                                    442 ;	.\stcboot.c:29: void binary_count(void) {
                                    443 ;	-----------------------------------------
                                    444 ;	 function binary_count
                                    445 ;	-----------------------------------------
      000012                        446 _binary_count:
                                    447 ;	.\stcboot.c:31: do{
      000012 7E 00            [12]  448 	mov	r6,#0x00
      000014 7F 00            [12]  449 	mov	r7,#0x00
      000016                        450 00101$:
                                    451 ;	.\stcboot.c:33: P1 = ~count;  // Output inverted count to LEDs
      000016 8E 05            [24]  452 	mov	ar5,r6
      000018 ED               [12]  453 	mov	a,r5
      000019 F4               [12]  454 	cpl	a
      00001A F5 90            [12]  455 	mov	_P1,a
                                    456 ;	.\stcboot.c:35: delay(5000);
      00001C 90 13 88         [24]  457 	mov	dptr,#0x1388
      00001F C0 07            [24]  458 	push	ar7
      000021 C0 06            [24]  459 	push	ar6
      000023 12r00r00         [24]  460 	lcall	_delay
      000026 D0 06            [24]  461 	pop	ar6
      000028 D0 07            [24]  462 	pop	ar7
                                    463 ;	.\stcboot.c:36: count++;
      00002A 0E               [12]  464 	inc	r6
      00002B BE 00 01         [24]  465 	cjne	r6,#0x00,00119$
      00002E 0F               [12]  466 	inc	r7
      00002F                        467 00119$:
                                    468 ;	.\stcboot.c:38: while (count < 256);
      00002F 74 FF            [12]  469 	mov	a,#0x100 - 0x01
      000031 2F               [12]  470 	add	a,r7
      000032 50 E2            [24]  471 	jnc	00101$
                                    472 ;	.\stcboot.c:39: return;
                                    473 ;	.\stcboot.c:40: }
      000034 22               [24]  474 	ret
                                    475 ;------------------------------------------------------------
                                    476 ;Allocation info for local variables in function 'cylon'
                                    477 ;------------------------------------------------------------
                                    478 ;pos           Allocated to registers r7 
                                    479 ;------------------------------------------------------------
                                    480 ;	.\stcboot.c:43: void cylon(void) {
                                    481 ;	-----------------------------------------
                                    482 ;	 function cylon
                                    483 ;	-----------------------------------------
      000035                        484 _cylon:
                                    485 ;	.\stcboot.c:44: unsigned char pos = 1;
      000035 7F 01            [12]  486 	mov	r7,#0x01
                                    487 ;	.\stcboot.c:45: while (1) {
      000037                        488 00104$:
                                    489 ;	.\stcboot.c:46: P1 = ~pos;  // Invert output to turn LEDs on
      000037 EF               [12]  490 	mov	a,r7
      000038 F4               [12]  491 	cpl	a
      000039 F5 90            [12]  492 	mov	_P1,a
                                    493 ;	.\stcboot.c:47: delay(5000);
      00003B 90 13 88         [24]  494 	mov	dptr,#0x1388
      00003E C0 07            [24]  495 	push	ar7
      000040 12r00r00         [24]  496 	lcall	_delay
      000043 D0 07            [24]  497 	pop	ar7
                                    498 ;	.\stcboot.c:48: pos <<= 1;
      000045 EF               [12]  499 	mov	a,r7
      000046 2F               [12]  500 	add	a,r7
                                    501 ;	.\stcboot.c:49: if (pos == 0) pos = 1;  // Reset to start position
      000047 FF               [12]  502 	mov	r7,a
      000048 70 ED            [24]  503 	jnz	00104$
      00004A 7F 01            [12]  504 	mov	r7,#0x01
                                    505 ;	.\stcboot.c:51: }
      00004C 80 E9            [24]  506 	sjmp	00104$
                                    507 ;------------------------------------------------------------
                                    508 ;Allocation info for local variables in function 'dual_cylon'
                                    509 ;------------------------------------------------------------
                                    510 ;pos1          Allocated to registers r7 
                                    511 ;pos2          Allocated to registers r6 
                                    512 ;------------------------------------------------------------
                                    513 ;	.\stcboot.c:54: void dual_cylon(void) {
                                    514 ;	-----------------------------------------
                                    515 ;	 function dual_cylon
                                    516 ;	-----------------------------------------
      00004E                        517 _dual_cylon:
                                    518 ;	.\stcboot.c:55: unsigned char pos1 = 1, pos2 = 0x80;
      00004E 7F 01            [12]  519 	mov	r7,#0x01
      000050 7E 80            [12]  520 	mov	r6,#0x80
                                    521 ;	.\stcboot.c:56: while (1) {
      000052                        522 00104$:
                                    523 ;	.\stcboot.c:57: P1 = ~(pos1 | pos2);  // Invert output for correct LED logic
      000052 EE               [12]  524 	mov	a,r6
      000053 4F               [12]  525 	orl	a,r7
      000054 F4               [12]  526 	cpl	a
      000055 F5 90            [12]  527 	mov	_P1,a
                                    528 ;	.\stcboot.c:58: delay(5000);
      000057 90 13 88         [24]  529 	mov	dptr,#0x1388
      00005A C0 07            [24]  530 	push	ar7
      00005C C0 06            [24]  531 	push	ar6
      00005E 12r00r00         [24]  532 	lcall	_delay
      000061 D0 06            [24]  533 	pop	ar6
      000063 D0 07            [24]  534 	pop	ar7
                                    535 ;	.\stcboot.c:59: pos1 <<= 1;
      000065 EF               [12]  536 	mov	a,r7
      000066 2F               [12]  537 	add	a,r7
      000067 FF               [12]  538 	mov	r7,a
                                    539 ;	.\stcboot.c:60: pos2 >>= 1;
      000068 EE               [12]  540 	mov	a,r6
      000069 C3               [12]  541 	clr	c
      00006A 13               [12]  542 	rrc	a
      00006B FE               [12]  543 	mov	r6,a
                                    544 ;	.\stcboot.c:61: if (pos1 == 0x80) {  // Reset condition
      00006C BF 80 E3         [24]  545 	cjne	r7,#0x80,00104$
                                    546 ;	.\stcboot.c:62: pos1 = 1;
      00006F 7F 01            [12]  547 	mov	r7,#0x01
                                    548 ;	.\stcboot.c:63: pos2 = 0x80;
      000071 7E 80            [12]  549 	mov	r6,#0x80
                                    550 ;	.\stcboot.c:66: }
      000073 80 DD            [24]  551 	sjmp	00104$
                                    552 ;------------------------------------------------------------
                                    553 ;Allocation info for local variables in function 'display_number'
                                    554 ;------------------------------------------------------------
                                    555 ;temp          Allocated to registers r6 r7 
                                    556 ;ones          Allocated to registers r4 
                                    557 ;tens          Allocated to registers r3 
                                    558 ;hundreds      Allocated to registers r2 
                                    559 ;thousands     Allocated to registers r6 
                                    560 ;------------------------------------------------------------
                                    561 ;	.\stcboot.c:69: void display_number(void) {
                                    562 ;	-----------------------------------------
                                    563 ;	 function display_number
                                    564 ;	-----------------------------------------
      000075                        565 _display_number:
                                    566 ;	.\stcboot.c:70: unsigned int temp = number;
      000075 AE*00            [24]  567 	mov	r6,_number
      000077 AF*01            [24]  568 	mov	r7,(_number + 1)
                                    569 ;	.\stcboot.c:72: unsigned char ones = temp % 10;
      000079 75*00 0A         [24]  570 	mov	__moduint_PARM_2,#0x0a
      00007C 75*01 00         [24]  571 	mov	(__moduint_PARM_2 + 1),#0x00
      00007F 8E 82            [24]  572 	mov	dpl, r6
      000081 8F 83            [24]  573 	mov	dph, r7
      000083 C0 07            [24]  574 	push	ar7
      000085 C0 06            [24]  575 	push	ar6
      000087 12r00r00         [24]  576 	lcall	__moduint
      00008A AC 82            [24]  577 	mov	r4, dpl
      00008C D0 06            [24]  578 	pop	ar6
      00008E D0 07            [24]  579 	pop	ar7
                                    580 ;	.\stcboot.c:73: temp /= 10;
      000090 75*00 0A         [24]  581 	mov	__divuint_PARM_2,#0x0a
      000093 75*01 00         [24]  582 	mov	(__divuint_PARM_2 + 1),#0x00
                                    583 ;	.\stcboot.c:74: unsigned char tens = temp % 10;
      000096 8E 82            [24]  584 	mov	dpl, r6
      000098 8F 83            [24]  585 	mov	dph, r7
      00009A C0 04            [24]  586 	push	ar4
      00009C 12r00r00         [24]  587 	lcall	__divuint
      00009F AE 82            [24]  588 	mov	r6, dpl
      0000A1 AF 83            [24]  589 	mov	r7, dph
      0000A3 D0 04            [24]  590 	pop	ar4
      0000A5 75*00 0A         [24]  591 	mov	__moduint_PARM_2,#0x0a
      0000A8 75*01 00         [24]  592 	mov	(__moduint_PARM_2 + 1),#0x00
      0000AB 8E 82            [24]  593 	mov	dpl, r6
      0000AD 8F 83            [24]  594 	mov	dph, r7
      0000AF C0 07            [24]  595 	push	ar7
      0000B1 C0 06            [24]  596 	push	ar6
      0000B3 C0 04            [24]  597 	push	ar4
      0000B5 12r00r00         [24]  598 	lcall	__moduint
      0000B8 AB 82            [24]  599 	mov	r3, dpl
      0000BA D0 04            [24]  600 	pop	ar4
      0000BC D0 06            [24]  601 	pop	ar6
      0000BE D0 07            [24]  602 	pop	ar7
                                    603 ;	.\stcboot.c:75: temp /= 10;
      0000C0 75*00 0A         [24]  604 	mov	__divuint_PARM_2,#0x0a
      0000C3 75*01 00         [24]  605 	mov	(__divuint_PARM_2 + 1),#0x00
                                    606 ;	.\stcboot.c:76: unsigned char hundreds = temp % 10;
      0000C6 8E 82            [24]  607 	mov	dpl, r6
      0000C8 8F 83            [24]  608 	mov	dph, r7
      0000CA C0 04            [24]  609 	push	ar4
      0000CC C0 03            [24]  610 	push	ar3
      0000CE 12r00r00         [24]  611 	lcall	__divuint
      0000D1 AE 82            [24]  612 	mov	r6, dpl
      0000D3 AF 83            [24]  613 	mov	r7, dph
      0000D5 D0 03            [24]  614 	pop	ar3
      0000D7 D0 04            [24]  615 	pop	ar4
      0000D9 75*00 0A         [24]  616 	mov	__moduint_PARM_2,#0x0a
      0000DC 75*01 00         [24]  617 	mov	(__moduint_PARM_2 + 1),#0x00
      0000DF 8E 82            [24]  618 	mov	dpl, r6
      0000E1 8F 83            [24]  619 	mov	dph, r7
      0000E3 C0 07            [24]  620 	push	ar7
      0000E5 C0 06            [24]  621 	push	ar6
      0000E7 C0 04            [24]  622 	push	ar4
      0000E9 C0 03            [24]  623 	push	ar3
      0000EB 12r00r00         [24]  624 	lcall	__moduint
      0000EE AA 82            [24]  625 	mov	r2, dpl
      0000F0 D0 03            [24]  626 	pop	ar3
      0000F2 D0 04            [24]  627 	pop	ar4
      0000F4 D0 06            [24]  628 	pop	ar6
      0000F6 D0 07            [24]  629 	pop	ar7
                                    630 ;	.\stcboot.c:77: temp /= 10;
      0000F8 75*00 0A         [24]  631 	mov	__divuint_PARM_2,#0x0a
      0000FB 75*01 00         [24]  632 	mov	(__divuint_PARM_2 + 1),#0x00
                                    633 ;	.\stcboot.c:78: unsigned char thousands = temp % 10;
      0000FE 8E 82            [24]  634 	mov	dpl, r6
      000100 8F 83            [24]  635 	mov	dph, r7
      000102 C0 04            [24]  636 	push	ar4
      000104 C0 03            [24]  637 	push	ar3
      000106 C0 02            [24]  638 	push	ar2
      000108 12r00r00         [24]  639 	lcall	__divuint
      00010B AE 82            [24]  640 	mov	r6, dpl
      00010D 75 F0 0A         [24]  641 	mov	b,#0x0a
      000110 EE               [12]  642 	mov	a,r6
      000111 84               [48]  643 	div	ab
                                    644 ;	.\stcboot.c:80: P0 = seg_table[thousands];
      000112 E5 F0            [12]  645 	mov	a,b
      000114 24r0C            [12]  646 	add	a, #_seg_table
      000116 F9               [12]  647 	mov	r1,a
      000117 87 80            [24]  648 	mov	_P0,@r1
                                    649 ;	.\stcboot.c:81: P2_0 = 0;
                                    650 ;	assignBit
      000119 C2 A0            [12]  651 	clr	_P2_0
                                    652 ;	.\stcboot.c:82: delay(500);
      00011B 90 01 F4         [24]  653 	mov	dptr,#0x01f4
      00011E 12r00r00         [24]  654 	lcall	_delay
      000121 D0 02            [24]  655 	pop	ar2
                                    656 ;	.\stcboot.c:83: P2_0 = 1;
                                    657 ;	assignBit
      000123 D2 A0            [12]  658 	setb	_P2_0
                                    659 ;	.\stcboot.c:85: P0 = seg_table[hundreds];
      000125 EA               [12]  660 	mov	a,r2
      000126 24r0C            [12]  661 	add	a, #_seg_table
      000128 F9               [12]  662 	mov	r1,a
      000129 87 80            [24]  663 	mov	_P0,@r1
                                    664 ;	.\stcboot.c:86: P2_1 = 0;
                                    665 ;	assignBit
      00012B C2 A1            [12]  666 	clr	_P2_1
                                    667 ;	.\stcboot.c:87: delay(500);
      00012D 90 01 F4         [24]  668 	mov	dptr,#0x01f4
      000130 12r00r00         [24]  669 	lcall	_delay
      000133 D0 03            [24]  670 	pop	ar3
                                    671 ;	.\stcboot.c:88: P2_1 = 1;
                                    672 ;	assignBit
      000135 D2 A1            [12]  673 	setb	_P2_1
                                    674 ;	.\stcboot.c:90: P0 = seg_table[tens];
      000137 EB               [12]  675 	mov	a,r3
      000138 24r0C            [12]  676 	add	a, #_seg_table
      00013A F9               [12]  677 	mov	r1,a
      00013B 87 80            [24]  678 	mov	_P0,@r1
                                    679 ;	.\stcboot.c:91: P2_2 = 0;
                                    680 ;	assignBit
      00013D C2 A2            [12]  681 	clr	_P2_2
                                    682 ;	.\stcboot.c:92: delay(500);
      00013F 90 01 F4         [24]  683 	mov	dptr,#0x01f4
      000142 12r00r00         [24]  684 	lcall	_delay
      000145 D0 04            [24]  685 	pop	ar4
                                    686 ;	.\stcboot.c:93: P2_2 = 1;
                                    687 ;	assignBit
      000147 D2 A2            [12]  688 	setb	_P2_2
                                    689 ;	.\stcboot.c:95: P0 = seg_table[ones];
      000149 EC               [12]  690 	mov	a,r4
      00014A 24r0C            [12]  691 	add	a, #_seg_table
      00014C F9               [12]  692 	mov	r1,a
      00014D 87 80            [24]  693 	mov	_P0,@r1
                                    694 ;	.\stcboot.c:96: P2_3 = 0;
                                    695 ;	assignBit
      00014F C2 A3            [12]  696 	clr	_P2_3
                                    697 ;	.\stcboot.c:97: delay(500);
      000151 90 01 F4         [24]  698 	mov	dptr,#0x01f4
      000154 12r00r00         [24]  699 	lcall	_delay
                                    700 ;	.\stcboot.c:98: P2_3 = 1;
                                    701 ;	assignBit
      000157 D2 A3            [12]  702 	setb	_P2_3
                                    703 ;	.\stcboot.c:99: }
      000159 22               [24]  704 	ret
                                    705 ;------------------------------------------------------------
                                    706 ;Allocation info for local variables in function 'number_clicker'
                                    707 ;------------------------------------------------------------
                                    708 ;	.\stcboot.c:103: void number_clicker(void) {
                                    709 ;	-----------------------------------------
                                    710 ;	 function number_clicker
                                    711 ;	-----------------------------------------
      00015A                        712 _number_clicker:
                                    713 ;	.\stcboot.c:105: if ((P3 & 0x08) == 0) { // Button Pressed
      00015A E5 B0            [12]  714 	mov	a,_P3
      00015C 20 E3 1E         [24]  715 	jb	acc.3,00104$
                                    716 ;	.\stcboot.c:106: delay(5000);
      00015F 90 13 88         [24]  717 	mov	dptr,#0x1388
      000162 12r00r00         [24]  718 	lcall	_delay
                                    719 ;	.\stcboot.c:107: number++;
      000165 05*00            [12]  720 	inc	_number
      000167 E4               [12]  721 	clr	a
      000168 B5*00 02         [24]  722 	cjne	a,_number,00137$
      00016B 05*01            [12]  723 	inc	(_number + 1)
      00016D                        724 00137$:
                                    725 ;	.\stcboot.c:108: if (number > 9999) number = 0; // Roll over to 0
      00016D C3               [12]  726 	clr	c
      00016E 74 0F            [12]  727 	mov	a,#0x0f
      000170 95*00            [12]  728 	subb	a,_number
      000172 74 27            [12]  729 	mov	a,#0x27
      000174 95*01            [12]  730 	subb	a,(_number + 1)
      000176 50 05            [24]  731 	jnc	00104$
      000178 E4               [12]  732 	clr	a
      000179 F5*00            [12]  733 	mov	_number,a
      00017B F5*01            [12]  734 	mov	(_number + 1),a
      00017D                        735 00104$:
                                    736 ;	.\stcboot.c:114: if ((P3 & 0x12) == 0) { // Button Pressed
      00017D E5 B0            [12]  737 	mov	a,_P3
      00017F 54 12            [12]  738 	anl	a,#0x12
      000181 70 1D            [24]  739 	jnz	00109$
                                    740 ;	.\stcboot.c:115: delay(5000);
      000183 90 13 88         [24]  741 	mov	dptr,#0x1388
      000186 12r00r00         [24]  742 	lcall	_delay
                                    743 ;	.\stcboot.c:116: if (number == 0) number = 9999; // Roll over to 9999
      000189 E5*00            [12]  744 	mov	a,_number
      00018B 45*01            [12]  745 	orl	a,(_number + 1)
      00018D 70 08            [24]  746 	jnz	00106$
      00018F 75*00 0F         [24]  747 	mov	_number,#0x0f
      000192 75*01 27         [24]  748 	mov	(_number + 1),#0x27
      000195 80 09            [24]  749 	sjmp	00109$
      000197                        750 00106$:
                                    751 ;	.\stcboot.c:117: else number--;
      000197 15*00            [12]  752 	dec	_number
      000199 74 FF            [12]  753 	mov	a,#0xff
      00019B B5*00 02         [24]  754 	cjne	a,_number,00142$
      00019E 15*01            [12]  755 	dec	(_number + 1)
      0001A0                        756 00142$:
      0001A0                        757 00109$:
                                    758 ;	.\stcboot.c:121: display_number();
                                    759 ;	.\stcboot.c:123: }
      0001A0 02r00r75         [24]  760 	ljmp	_display_number
                                    761 ;------------------------------------------------------------
                                    762 ;Allocation info for local variables in function 'main'
                                    763 ;------------------------------------------------------------
                                    764 ;	.\stcboot.c:125: void main(void) {
                                    765 ;	-----------------------------------------
                                    766 ;	 function main
                                    767 ;	-----------------------------------------
      0001A3                        768 _main:
                                    769 ;	.\stcboot.c:126: while (1) {
      0001A3                        770 00102$:
                                    771 ;	.\stcboot.c:129: dual_cylon();
      0001A3 12r00r4E         [24]  772 	lcall	_dual_cylon
                                    773 ;	.\stcboot.c:132: }
      0001A6 80 FB            [24]  774 	sjmp	00102$
                                    775 	.area CSEG    (CODE)
                                    776 	.area CONST   (CODE)
                                    777 	.area CONST   (CODE)
      000000                        778 _period:
      000000 E8 03 00 00            779 	.byte #0xe8, #0x03, #0x00, #0x00	; 1000
                                    780 	.area CSEG    (CODE)
                                    781 	.area XINIT   (CODE)
                                    782 	.area CABS    (ABS,CODE)
